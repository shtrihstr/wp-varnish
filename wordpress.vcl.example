vcl 4.0;

backend default {
    .host = "NGINX/APACHE HOST";
    .port = "NGINX/APACHE PORT";

    .connect_timeout = 300s;
    .first_byte_timeout = 300s;
    .between_bytes_timeout = 300s;
}

sub vcl_recv {

    # process purge req from WordPress plugin
    if (req.method == "POST" && req.url == "/__varnish-purge" && req.http.secret == "SECRET KEY") {
        ban(req.http.regex);
        return (synth(200, "Purged."));
    }

    # add real ip to X-Forwarded-For
    if (req.restarts == 0) {
        if (req.http.X-Forwarded-For) {
            set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
        }
        else {
            set req.http.X-Forwarded-For = client.ip;
        }
    }

    if (req.method != "GET" && req.method != "HEAD" && req.method != "PUT" && req.method != "POST" && req.method != "TRACE" &&
        req.method != "OPTIONS" && req.method != "PATCH" && req.method != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }

    # pass not "readable" requests
    if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
    }

    // ignore cookies for static files
    if (req.url ~ "(?i)\.(jpeg|jpg|png|gif|ico|webp|js|css|txt|pdf|gz|zip|lzma|bz2|tgz|tbz|woff|ttf|svg|eot|otf)$") {
    	unset req.http.Cookie;
        unset req.http.Https;
        return (hash);
    }

    # pass req with auth or https
    if (req.http.Authorization || req.http.Https) {
        return (pass);
    }

    # pass admin urls but not admin-ajax.php
    if (req.url ~ "^/(wp-admin|wp-login|\?s=|preview=true)" && req.url !~ "admin-ajax\.php") {
        return (pass);
    }

    # WooCommerce
    if (req.url ~ "/(cart|my-account|checkout|addons|/?add-to-cart=)") {
        return (pass);
    }

    # WordPress is_mobile()
    if (req.http.User-Agent ~ "(Mobile|Android|Silk/|Kindle|BlackBerry|Opera Mini|Opera Mobi)") {
        set req.http.X-Device = "Mobile";
    }
    else {
        set req.http.X-Device = "Desktop";
    }

    # remove tracking cookies
    if (req.http.Cookie) {
        set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(_[a-zA-Z0-9_\-]+|has_js)=[^;]*", "");
        set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");

        if (req.http.Cookie == "") {
            unset req.http.cookie;
        }
    }

    # pass req with cookies
    if (req.http.Cookie) {
        return (pass);
    }

    # remove _ga= param from url
    if (req.url ~ "_ga=") {
        set req.url = regsuball(req.url, "([\?|&])_ga=[^&\s]*&?", "\1");
        set req.url = regsuball(req.url, "[\?|&]+$", "");
    }

    return(hash);
}


sub vcl_backend_response {
    set beresp.http.X-Purge-URL = bereq.url;
    set beresp.http.X-Purge-Host = bereq.http.host;

    if (beresp.status != 200 && beresp.status != 301 && beresp.status != 302 && beresp.status != 404) {
        set beresp.uncacheable = true;
        return (deliver);
    }

    if (beresp.ttl <= 0s || beresp.http.Vary == "*" ||  beresp.http.set-cookie || beresp.http.X-No-Cache || beresp.http.X-Varnish-No-Cache) {
        set beresp.uncacheable = true;
        return (deliver);
    }

    return (deliver);
}

sub vcl_hash {
    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    }
    else {
        hash_data(server.ip);
    }
    hash_data(req.http.X-Device);
    hash_data(req.http.X-Forwarded-Proto);

    return (lookup);
}

sub vcl_hit {
    if (obj.ttl >= 0s) {
        return (deliver);
    }
    else {
        return(fetch);
    }
}

sub vcl_deliver {
    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT: " + obj.hits + " times";
    }
    else {
        set resp.http.X-Cache = "MISS";
    }

    unset resp.http.Via;
    unset resp.http.X-Purge-Host;
    unset resp.http.X-Purge-URL;
    unset resp.http.X-Varnish;
    unset resp.http.X-Varnish-No-Cache;
    unset resp.http.X-Device;
    unset resp.http.Server;
}
